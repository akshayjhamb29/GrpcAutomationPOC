// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: service.proto

package mockingdemo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceB_ProcessRequest_FullMethodName = "/demo.ServiceB/ProcessRequest"
)

// ServiceBClient is the client API for ServiceB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service B definition
type ServiceBClient interface {
	ProcessRequest(ctx context.Context, in *EnhancedRequest, opts ...grpc.CallOption) (*ProcessedResponse, error)
}

type serviceBClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceBClient(cc grpc.ClientConnInterface) ServiceBClient {
	return &serviceBClient{cc}
}

func (c *serviceBClient) ProcessRequest(ctx context.Context, in *EnhancedRequest, opts ...grpc.CallOption) (*ProcessedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessedResponse)
	err := c.cc.Invoke(ctx, ServiceB_ProcessRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceBServer is the server API for ServiceB service.
// All implementations must embed UnimplementedServiceBServer
// for forward compatibility.
//
// Service B definition
type ServiceBServer interface {
	ProcessRequest(context.Context, *EnhancedRequest) (*ProcessedResponse, error)
	mustEmbedUnimplementedServiceBServer()
}

// UnimplementedServiceBServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceBServer struct{}

func (UnimplementedServiceBServer) ProcessRequest(context.Context, *EnhancedRequest) (*ProcessedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRequest not implemented")
}
func (UnimplementedServiceBServer) mustEmbedUnimplementedServiceBServer() {}
func (UnimplementedServiceBServer) testEmbeddedByValue()                  {}

// UnsafeServiceBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceBServer will
// result in compilation errors.
type UnsafeServiceBServer interface {
	mustEmbedUnimplementedServiceBServer()
}

func RegisterServiceBServer(s grpc.ServiceRegistrar, srv ServiceBServer) {
	// If the following call pancis, it indicates UnimplementedServiceBServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceB_ServiceDesc, srv)
}

func _ServiceB_ProcessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnhancedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceBServer).ProcessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceB_ProcessRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceBServer).ProcessRequest(ctx, req.(*EnhancedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceB_ServiceDesc is the grpc.ServiceDesc for ServiceB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.ServiceB",
	HandlerType: (*ServiceBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessRequest",
			Handler:    _ServiceB_ProcessRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	ServiceA_HandleUserRequest_FullMethodName = "/demo.ServiceA/HandleUserRequest"
)

// ServiceAClient is the client API for ServiceA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service A definition (for REST to gRPC bridge)
type ServiceAClient interface {
	HandleUserRequest(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type serviceAClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceAClient(cc grpc.ClientConnInterface) ServiceAClient {
	return &serviceAClient{cc}
}

func (c *serviceAClient) HandleUserRequest(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, ServiceA_HandleUserRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceAServer is the server API for ServiceA service.
// All implementations must embed UnimplementedServiceAServer
// for forward compatibility.
//
// Service A definition (for REST to gRPC bridge)
type ServiceAServer interface {
	HandleUserRequest(context.Context, *UserRequest) (*UserResponse, error)
	mustEmbedUnimplementedServiceAServer()
}

// UnimplementedServiceAServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceAServer struct{}

func (UnimplementedServiceAServer) HandleUserRequest(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUserRequest not implemented")
}
func (UnimplementedServiceAServer) mustEmbedUnimplementedServiceAServer() {}
func (UnimplementedServiceAServer) testEmbeddedByValue()                  {}

// UnsafeServiceAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceAServer will
// result in compilation errors.
type UnsafeServiceAServer interface {
	mustEmbedUnimplementedServiceAServer()
}

func RegisterServiceAServer(s grpc.ServiceRegistrar, srv ServiceAServer) {
	// If the following call pancis, it indicates UnimplementedServiceAServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceA_ServiceDesc, srv)
}

func _ServiceA_HandleUserRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAServer).HandleUserRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceA_HandleUserRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAServer).HandleUserRequest(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceA_ServiceDesc is the grpc.ServiceDesc for ServiceA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.ServiceA",
	HandlerType: (*ServiceAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleUserRequest",
			Handler:    _ServiceA_HandleUserRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
